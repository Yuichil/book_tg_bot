from aiogram import F
from aiogram import Router
from aiogram.filters import Command, or_f
from aiogram.types import Message

from database import get_user_books, add_list
from keyboards.inline import start, your_list, compilation

command_router = Router()


@command_router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    text = ("–ü—Ä–∏–≤–µ—Ç, —è <i>BookBuddy</i>!"
            " –Ø —Ç–≤–æ–π –∫–Ω–∏–∂–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏. –ï—â—ë —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–∞—Ö –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è. \n\n "
            "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

    await message.answer(text, reply_markup=start, parse_mode="HTML")


@command_router.message(or_f(Command("home"), (F.text == "–î–æ–º üè†")))
async def command_start_handler(message: Message) -> None:
    text = "–î–æ–º üè†"
    await message.answer(text, reply_markup=start)


@command_router.message(or_f(Command("opportunities"), (F.text == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")))
async def command_opportunities(message: Message) -> None:
    text = ("–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É: \n\n"
            "<b>1. –ü–æ–∏—Å–∫ –∫–Ω–∏–≥:</b>\n- –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ.\n\n"
            "<b>2. –°–ø–∏—Å–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è:</b>\n- –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è.\n\n"
            "<b>3. –ü–æ–¥–±–æ—Ä–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º:</b>\n- –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–Ω–∏–≥–∏.\n\n")

    await message.answer(text, reply_markup=start, parse_mode="HTML")


@command_router.message(or_f(Command("search"), (F.text == "–ü–æ–∏—Å–∫ üîç")))
async def command_opportunities(message: Message) -> None:
    text = "–í–≤–µ–¥–∏—Ç–µ —Ñ–ò–û –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
    await message.answer(text, reply_markup=start)


@command_router.message(or_f(Command("compilation"), (F.text == "–ü–æ–¥–±–æ—Ä–∫–∞ üìö")))
async def command_compilation(message: Message) -> None:
    text = "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ö–æ—Ç–∏—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"
    await message.answer(text, reply_markup=compilation)


@command_router.message(or_f(Command("your_list"), (F.text == "–í–∞—à —Å–ø–∏—Å–æ–∫ üìã")))
async def command_your_list(message: Message) -> None:
    text = "–í—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É?"
    await message.answer(text, reply_markup=your_list)


@command_router.message(or_f(Command("watch_list"), (F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")))
async def command_your_list(message: Message) -> None:
    user_id = message.from_user.id
    l = get_user_books(user_id)
    user_list = "–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥: \n"
    for line in l:
        user_list += f"{line[1]} - {line[2]} \n"
    await message.answer(user_list)

@command_router.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    text = ("/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/opportunities - —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç\n"
            "/search - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥\n"
            "/compilation - –ø–æ–±–æ—Ä–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º\n"
            "/your_list - –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
            "/form - –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫\n"
            )
    await message.answer(text)
